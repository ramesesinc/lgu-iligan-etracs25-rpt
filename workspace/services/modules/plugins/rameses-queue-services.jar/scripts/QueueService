import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.util.*;

class QueueService { 

    @XConnection('ws_sender')
    def wssender;

	@XConnection("queue_poll")
	def queue_poll;

	@DataContext(value='queue_group', adapter='queue') 
	def qg; 

	@DataContext(value='queue_counter', adapter='queue') 
	def qc; 

	@DataContext(value='queue_section', adapter='queue') 
	def qs; 

	@DataContext(value='queue_number', adapter='queue') 
	def qn; 

	@DataContext(value='queue_number_counter', adapter='queue') 
	def qnc; 

	@Service('DateService')
	def dateSvc;

	@Service 
	def self; 


	/* initiated by taxpayer to get the next current series number  */
	@ProxyMethod 
	public def fetchNextNumber( o ) {
		if ( !o.sectionid ) throw new Exception('sectionid parameter is required');

		def m = qs.find([ objid: o.sectionid ]).first(); 
		if ( !m ) throw new Exception('queue section does not exist'); 

		def prefix = m.prefix; 
		def m1 = [ 
			groupid: m.groupid, sectionid: m.objid, 
			txndate: dateSvc.getServerDate(), 
			seriesno: m.currentseries+1, 			
			state : 'PENDING' 
		]; 
		qn.create( m1 ); 

		qs.find([ objid: o.sectionid ]).update([ currentseries: m1.seriesno ]); 
		
		//fire notification here...
		//notify([ objid: m1.objid, seriesno: m1.seriesno, type:'FETCH_NEXT' ]);  
		return formatSeriesNumber([ seriesno: m1.seriesno, prefix: prefix ]); 
	} 

	@ProxyMethod
	def formatSeriesNumber( data ) {
		if ( data.seriesno ) {
			def prefix = (data.prefix? data.prefix : ''); 
			def snum = data.seriesno.toString();
			if ( snum.length() < 4 ) { 
				snum = snum.padLeft(4,'0'); 
			} 
			return ''+prefix+snum; 
		} else { 
			return ''; 
		} 
	} 	

	@ProxyMethod(local=true) 
	void notify( data ) { 
		if ( data.sectionid && data.counterid ) { 
			def uuid = ''+ data.sectionid +'_'+ data.counterid; 
			data.uuid = uuid.toLowerCase(); 
		} 
		data.formattedseriesno = formatSeriesNumber( data ); 
		self.notifyHttp( data ); 
		self.notifyWs( data ); 
	} 

	@Async 
	@ProxyMethod(local=true) 
	public void notifyHttp( data ) { 
		if ( data ) { 
			queue_poll.send( data );  
		} 
	} 
	@Async 
	@ProxyMethod(local=true) 
	public void notifyWs( data ) { 
		if ( !data ) return; 

		data.channel = data.group = 'queue'; 

		wssender.send([ 
            channel : data.channel, 
            group   : data.group, 
            data    : resolveData( data )  
        ]); 
	} 	

	def resolveData( data ) {
        try {
            return new Base64Cipher().decode( data ); 
        } catch(Throwable t) { 
            return data; 
        } 
    }  

} 